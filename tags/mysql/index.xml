<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on home</title>
    <link>/tags/mysql/</link>
    <description>Recent content in Mysql on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 28 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql主从</title>
      <link>/post/2020-05-28-mysql%E4%B8%BB%E4%BB%8E/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-28-mysql%E4%B8%BB%E4%BB%8E/</guid>
      <description>mysql集群可以简单分为几类：
1、一主一从，常用，简单，多用于读写分离或备份。
master -----&amp;gt; slave  2、互为主主，不常用。
master1 &amp;lt;-----&amp;gt; master2  3、一主多从，常用，多用于读写分离跟备份。
master1 -----&amp;gt; slave1 \-----&amp;gt; slave2 \-----&amp;gt; slave3  4、一主多级从，不常用。缺点很明显，多级数据同步时间会是个硬伤；多级如果上级挂了，下级数据就不能同步，也是个硬伤。
master -----&amp;gt; slave1 ----&amp;gt; slave5 \-----&amp;gt; slave2 -----&amp;gt; slave3 \------&amp;gt; slave4  5、多主一从，不常用。
master1 ---------\ master2 ------------&amp;gt; slave1 master3 ---------/  搭建一主一从
首先需要准备两台服务器：node04、node05，使用mysql5.7。
node04作为master。ip：192.168.56.14
node05作为slave。ip：192.168.56.15
node05的/etc/hosts文件增加192.168.56.14 node04
 配置前两台mysql服务器都需创建需要同步的数据库是哪个  create database pdc;   node04节点修改mysql配置  vi /etc/my.cnf # [mysqld]加入以下配置 log-bin=master-bin #二进制文件名称 binlog-format=ROW #二进制日志格式，有row、statement、mixed三种格式，row指的是把改变的内容复制过去，而不是把命令在从服务器上执行一遍，statement指的是在主服务器上执行的SQL语句，在从服务器上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。mixed指的是默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。 server-id=1	#要求各个服务器的id必须不一样 binlog-do-db=pdc #同步的数据库名称   登录node4的mysql授权同步的用户  # 授权操作 set global validate_password_policy=0; set global validate_password_length=1; grant replication slave on *.</description>
    </item>
    
    <item>
      <title>mysql执行计划</title>
      <link>/post/2020-05-27-mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-27-mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</guid>
      <description>参考：
mysql5.7
马士兵database笔记
 mysql查看执行计划使用explain+SQL语句。注意：执行计划里面的参数都是预估值，并不是正在的查询！！！
 explain示例结果
+----+--------------+-------------+------------+--------+---------------------+---------------------+---------+------------------+------+----------+-------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+--------------+-------------+------------+--------+---------------------+---------------------+---------+------------------+------+----------+-------------------------+ | 1 | PRIMARY | st | NULL | index | PRIMARY | PRIMARY | 82 | NULL | 17 | 100.00 | NULL | | 1 | PRIMARY | sc | NULL | ref | PRIMARY | PRIMARY | 82 | learning.</description>
    </item>
    
    <item>
      <title>mysql锁</title>
      <link>/post/2020-05-27-mysql%E9%94%81/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-27-mysql%E9%94%81/</guid>
      <description>参考：
mysql5.7 InnoDB-locking
mysql5.7 Lock-tables
马士兵database笔记
mysql常用锁分为两类：
1、表锁。开销小，粒度大，发生锁冲突概率高，并发效率低，不会产生死锁。一般适合查询类场景。
2、行锁。开销大，粒度小，发生锁冲突概率低，并发效率高，可能会造成死锁。一般适合更新类场景。
mysql手动开启锁：
LOCK TABLES tbl_name [[AS] alias] lock_type [, tbl_name [[AS] alias] lock_type] ... lock_type: { READ [LOCAL] | [LOW_PRIORITY] WRITE } UNLOCK TABLES  1、MyISAM锁 表共享读锁（table read locking） 不会阻塞其他session对表的读操作，但会阻塞写操作；当前session既可以读也可以进行写操作。
表独占写锁（table write locking） 会阻塞其他session对表的写跟读操作；当前session既可以读也可以进行写操作。
建表模拟数据：
CREATE TABLE `testlock` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8; INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;1&#39;, &#39;a&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;2&#39;, &#39;b&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;3&#39;, &#39;c&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;4&#39;, &#39;d&#39;);  写阻塞</description>
    </item>
    
    <item>
      <title>mysql tips</title>
      <link>/post/2019-01-10-mysql-tips/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-01-10-mysql-tips/</guid>
      <description>mysql常用操作 # curd等 insert into table_name values (xx,xx,xx); select *from table_name; update table_name set a=xx, b=xx where c=xx; delete from table_name where a=xx; explain select *from a=xxx; # 状态、参数、表信息等 # 官网show命令：https://dev.mysql.com/doc/refman/8.0/en/show.html show indexes from table_name; show status like &#39;slow_queries&#39;; show status like &#39;connections&#39; ; show status like &#39;threads%&#39;; Show status like &#39;slow_queries&#39; or like &#39;connections&#39; or like &#39;threads&#39;; show variables like &#39;%default%&#39;; show engine innodb status; show processlist; analyze table table_name;  mysql索引  聚簇索引（保存整条记录） 普通索引（保存主键，然后回表查询记录） 下推索引（mysql 5.</description>
    </item>
    
  </channel>
</rss>