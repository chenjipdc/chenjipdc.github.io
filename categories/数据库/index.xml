<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on home</title>
    <link>/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mysql执行计划</title>
      <link>/post/2020-05-27-mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-27-mysql%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</guid>
      <description>参考：
mysql5.7
马士兵database笔记
 mysql查看执行计划使用explain+SQL语句。注意：执行计划里面的参数都是预估值，并不是正在的查询！！！
 explain示例结果
+----+--------------+-------------+------------+--------+---------------------+---------------------+---------+------------------+------+----------+-------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+--------------+-------------+------------+--------+---------------------+---------------------+---------+------------------+------+----------+-------------------------+ | 1 | PRIMARY | st | NULL | index | PRIMARY | PRIMARY | 82 | NULL | 17 | 100.00 | NULL | | 1 | PRIMARY | sc | NULL | ref | PRIMARY | PRIMARY | 82 | learning.</description>
    </item>
    
    <item>
      <title>mysql锁</title>
      <link>/post/2020-05-27-mysql%E9%94%81/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020-05-27-mysql%E9%94%81/</guid>
      <description>参考：
mysql5.7 InnoDB-locking
mysql5.7 Lock-tables
马士兵database笔记
mysql常用锁分为两类：
1、表锁。开销小，粒度大，发生锁冲突概率高，并发效率低，不会产生死锁。一般适合查询类场景。
2、行锁。开销大，粒度小，发生锁冲突概率低，并发效率高，可能会造成死锁。一般适合更新类场景。
mysql手动开启锁：
LOCK TABLES tbl_name [[AS] alias] lock_type [, tbl_name [[AS] alias] lock_type] ... lock_type: { READ [LOCAL] | [LOW_PRIORITY] WRITE } UNLOCK TABLES  1、MyISAM锁 表共享读锁（table read locking） 不会阻塞其他session对表的读操作，但会阻塞写操作；当前session既可以读也可以进行写操作。
表独占写锁（table write locking） 会阻塞其他session对表的写跟读操作；当前session既可以读也可以进行写操作。
建表模拟数据：
CREATE TABLE `testlock` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8; INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;1&#39;, &#39;a&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;2&#39;, &#39;b&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;3&#39;, &#39;c&#39;); INSERT INTO `testlock` (`id`, `name`) VALUES (&#39;4&#39;, &#39;d&#39;);  写阻塞</description>
    </item>
    
    <item>
      <title>mysql tips</title>
      <link>/post/2019-01-10-mysql-tips/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-01-10-mysql-tips/</guid>
      <description>mysql常用操作 # curd等 insert into table_name values (xx,xx,xx); select *from table_name; update table_name set a=xx, b=xx where c=xx; delete from table_name where a=xx; explain select *from a=xxx; # 状态、参数、表信息等 # 官网show命令：https://dev.mysql.com/doc/refman/8.0/en/show.html show indexes from table_name; show status like &#39;slow_queries&#39;; show status like &#39;connections&#39; ; show status like &#39;threads%&#39;; Show status like &#39;slow_queries&#39; or like &#39;connections&#39; or like &#39;threads&#39;; show variables like &#39;%default%&#39;; show engine innodb status; show processlist; analyze table table_name;  mysql索引  聚簇索引（保存整条记录） 普通索引（保存主键，然后回表查询记录） 下推索引（mysql 5.</description>
    </item>
    
    <item>
      <title>mongodb主从(不建议使用)</title>
      <link>/post/2018-09-25-mongodb%E4%B8%BB%E4%BB%8E%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-25-mongodb%E4%B8%BB%E4%BB%8E%E4%B8%8D%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8/</guid>
      <description>参考资料 官网 master-slave
mongodb的主从要注意的事项  主服务器挂掉，从服务器不会自动取代主服务器。 主服务器挂掉后重启，从服务器则会重新同步数据，之前同步过来的数据被初始化。 综合以上两点，mongodb要随时做好数据备份，以免造成无法弥补的数据丢失！！！  master docker run -v ~/docker/test/mongo/test1/data/:/data/db -p 27001:27017 --name master_mongo --network docker_default mongo:3.2 mongod --dbpath /data/db --master  slave docker run -v ~/docker/test/mongo/test2/data/:/data/db -p 27002:27017 --name slave_mongo --network docker_default mongo:3.2 mongod --dbpath /data/db --slave --source 192.168.1.222:27001   &amp;ndash;only 可指定database &amp;ndash;slavedelay &amp;ndash;fastsyn &amp;ndash;aoturesync &amp;ndash;oplogSize   也可先创建从节点(slave)
docker run -v ~/docker/test/mongo/test3/data/:/data/db -p 27003:27017 --name slave1_mongo --network docker_default mongo:3.2 mongod --dbpath /data/db --slave  然后再指定master</description>
    </item>
    
    <item>
      <title>mongodb分片</title>
      <link>/post/2018-09-26-mongodb%E5%88%86%E7%89%87/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-26-mongodb%E5%88%86%E7%89%87/</guid>
      <description>参考资料 官网术语glossary 官网Configuration File文档 官网教程tutorial 官网Replication文档 官网sharding文档 官网mongodb生态
张友东的博客 【csdn】MongoDB 分片的原理、搭建、应用
分片架构 一、分片（shard server） 配置文件sharding-config.yml systemLog: destination: file # 值只有三个syslog，console，file path: /data/db/mongo-standard.log #标准日志文件 logAppend: true #日志是否追加 storage: dbPath: /data/db/ #数据目录 # syncPeriodSecs: 60 #这个参数做好不要设置，使用默认设置就好，默认60秒 journal: enabled: true #是否开启日志刷入磁盘 commitIntervalMs: 200 #从磁盘刷入时间间隔，为毫秒 net: port: 27017 #启动端口 #processManagement: #fork: true #是否启用守护进程 #pidFilePath: /data/db/mongo.pid #mongos或mongod进程id文件，配合fork使用 replication: oplogSizeMB: 1000 #复制集操作日志oplog大小 # replSetName: name #复制集的名称，复制集必须要有一个名称 security: authorization: disabled #开启验证，默认disabled # mongod才有这个配置，mongos没有 sharding: clusterRole: shardsvr #分片集群角色，configsvr为配置服务器（默认启动端口 27019），shardsvr为分片服务器（默认启动端口 27018） archiveMovedChunks: false #true, 在move chunk 时，源 shard 会将迁移的 chunk 数据归档一份在数据目录里，会占用磁盘空间  三个片区  分片一：</description>
    </item>
    
    <item>
      <title>mongodb副本集（建议使用）</title>
      <link>/post/2018-09-25-mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-25-mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8/</guid>
      <description>架构图  主节点挂了之后，会自动选举主节点
 docker创建network driver为bridge，注意网段可能冲突
docker network create -d bridge --subnet 172.11.0.0/24 mongo_network  启动为双节点 docker run -d -v ~/docker/test/mongo/test1/data/:/data/db -p 27001:27017 --ip 172.11.0.2 --name master_mongo --network mongo_network mongo:3.2 mongod --dbpath /data/db --replSet repl0 docker run -d -v ~/docker/test/mongo/test2/data/:/data/db -p 27002:27017 --ip 172.11.0.3 --name slave_mongo --network mongo_network mongo:3.2 mongod --dbpath /data/db --replSet repl0  初始化 rs.initiate({_id:&#39;repl0&#39;,members:[ {_id:0,host:&#39;172.11.0.2:27017&#39;}, {_id:1,host:&#39;172.11.0.3:27017&#39;}]})  添加新节点 # 添加新节点 rs.add(&#39;172.11.0.4:27017&#39;) # 添加选举节点 # rs.add(&#39;172.11.0.5:27017&#39;) # 刷新配置 rs.</description>
    </item>
    
  </channel>
</rss>